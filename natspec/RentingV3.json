{"notice": "This contract manages the renting process for NFTs in the LOTM Renting Protocol.", "methods": {"__init__(address,address,address,address,address,address,uint256,uint256,uint256,address,address)": {"notice": "Initialize the renting contract with necessary parameters and addresses."}, "delegate_to_wallet((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))[],address)": {"notice": "Delegates multiple NFTs to a wallet while not rented"}, "renter_delegate_to_wallet((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))[],address)": {"notice": "Delegates multiple NFTs to a wallet while rented"}, "deposit(uint256[],address)": {"notice": "Deposits a set of NFTs in vaults (creating them if needed) and sets up delegations"}, "mint((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))[])": {"notice": "Mints ERC721 renting tokens for a set of NFTs"}, "revoke_listing((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))[])": {"notice": "Revokes any existing listings for a set of NFTs"}, "start_rentals(((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)),((uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256),(uint256,uint256,uint256)))[],uint256,address,uint256)": {"notice": "Start rentals for multiple NFTs for the specified duration and delegate them to a wallet"}, "close_rentals((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))[])": {"notice": "Close rentals for multiple NFTs and claim rewards"}, "extend_rentals(((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)),((uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256),(uint256,uint256,uint256)))[],uint256,uint256)": {"notice": "Extend rentals for multiple NFTs for the specified duration"}, "withdraw((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))[])": {"notice": "Withdraw multiple NFTs and claim rewards"}, "stake_deposit(((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)),uint256)[])": {"notice": "Deposit the given amounts for multiple NFTs in the configured staking pool"}, "stake_withdraw(((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)),uint256)[],address)": {"notice": "Withdraw the given amounts for multiple NFTs from the configured staking pool"}, "stake_claim(((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)),uint256)[],address)": {"notice": "Claim the rewards for multiple NFTs from the configured staking pool"}, "stake_compound(((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)),uint256)[])": {"notice": "Compound the rewards for multiple NFTs in the configured staking pool"}, "claim((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))[])": {"notice": "Claim the rental rewards for multiple NFTs"}, "claimable_rewards(address,(uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))[])": {"notice": "Compute the claimable rewards for a given NFT owner"}, "claim_token_ownership((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))[])": {"notice": "Allow the owner of rental ERC721 tokens to claim the ownership of the underlying NFTs"}, "claim_fees()": {"notice": "Claim the accrued protocol fees"}, "set_protocol_fee(uint256)": {"notice": "Set the protocol fee"}, "change_protocol_wallet(address)": {"notice": "Change the protocol wallet"}, "set_paused(bool)": {"notice": "Pause or unpause the contract"}, "propose_admin(address)": {"notice": "Propose a new admin"}, "claim_ownership()": {"notice": "Claim the ownership of the contract"}, "tokenid_to_vault(uint256)": {"notice": "Get the vault address for a given token id"}, "supportsInterface(bytes4)": {"notice": "Check if the contract supports the given interface, as defined in ERC-165"}}}
{"title": "LOTM Renting Protocol Contract", "author": "[Zharta](https://zharta.io/)", "details": "This contract is the single user-facing contract for each Renting Market. It does not hold any NFTs, although it holds the rentals values and the protocol fees (payment tokens). It also manages the creation of vaults (as minimal proxies to the vault implementation) and implements the rental logic. The delegation and staking functionality are implemented in the vaults. The information regarding listings and rentals was externalized in order to reduce the gas costs while using the protocol. That requires the state to be passed as an argument to each function and validated by matching its hash against the one stored in the contract. Conversly, changes to the state are hashed and stored, and the resulting state variables are either published as events or returned directly to the user. The information that hold the state (`TokenContext`) consist of the token id, the owner of the NFT and the active rental (`Rental`), which are required to keep the integrity of the contract. The listings (`SignedListing`) are required arguments for the relevant functions and must be signed by both the owner (EIP-712 type 3) and the protocol admin (EIP-712 type 0). The signature is validated by the contract and requires the signature timestamp to be within 2 minutes of the current timestamp", "methods": {"__init__(address,address,address,address,address,address,uint256,uint256,uint256,address,address)": {"details": "Sets up the contract by initializing various addresses and fees.", "params": {"_vault_impl_addr": "The address of the vault implementation.", "_payment_token_addr": "The address of the payment token.", "_nft_contract_addr": "The address of the NFT contract.", "_delegation_registry_addr": "The address of the delegation registry.", "_renting_erc721": "The address of the renting ERC721 contract.", "_max_protocol_fee": "The maximum protocol fee that can be set.", "_protocol_fee": "The initial protocol fee.", "_protocol_wallet": "The wallet to receive protocol fees.", "_protocol_admin": "The administrator of the protocol."}}, "delegate_to_wallet((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))[],address)": {"details": "Iterates over token contexts to delegate NFTs to a wallet", "params": {"token_contexts": "An array of token contexts, each containing the vault state for an NFT.", "delegate": "The address to delegate the NFTs to."}}, "renter_delegate_to_wallet((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))[],address)": {"details": "Iterates over token contexts to delegate NFTs to a wallet", "params": {"token_contexts": "An array of token contexts, each containing the vault state for an NFT.", "delegate": "The address to delegate the NFTs to."}}, "deposit(uint256[],address)": {"details": "Iterates over a list of token ids, creating vaults if not needed, transfering the NFTs to the vaults and setting the delegations", "params": {"token_ids": "An array of NFT token ids to deposit.", "delegate": "Address to delegate the NFT to while listed."}}, "mint((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))[])": {"details": "Iterates over a list of token contexts, creating ERC721 renting tokens with matching ids for each NFT", "params": {"token_contexts": "An array of token contexts, each containing the rental state for an NFT."}}, "revoke_listing((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))[])": {"details": "Iterates over a list of token contexts, revoking listings for each NFT created before the current block timestamp", "params": {"token_contexts": "An array of token contexts, each containing the rental state for an NFT."}}, "start_rentals(((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)),((uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256),(uint256,uint256,uint256)))[],uint256,address,uint256)": {"details": "Iterates over token contexts to begin rentals for each NFT. The rental conditions are evaluated against the matching listing, signed by the owner and the protocol admin. The rental amount is computed and transferred to the protocol wallet and the delegation is created for the given wallet.", "params": {"token_contexts": "An array of token contexts, each containing the rental state and signed listing for an NFT.", "duration": "The duration of the rentals in hours.", "delegate": "The address to delegate the NFT to during the rental period.", "signature_timestamp": "The timestamp of the protocol admin signature."}}, "close_rentals((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))[])": {"details": "Iterates over token contexts to close rentals for each NFT. The new rental amount is computed pro-rata (considering the minimum duration) and any payback amount transferred to the renter. The protocol fee is computed and accrued and the delegation is revoked.", "params": {"token_contexts": "An array of token contexts, each containing the rental state for an NFT."}}, "extend_rentals(((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)),((uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256),(uint256,uint256,uint256)))[],uint256,uint256)": {"details": "Iterates over token contexts to extend rentals for each NFT. The rental amount is computed pro-rata (considering the minimum duration) and the new rental amount is computed. The difference between the new rental amount and the payback amount is transferred from / to the renter and the new rental protocol fee is computed and accrued.", "params": {"token_contexts": "An array of token contexts, each containing the rental state and signed listing for an NFT.", "duration": "The duration of the rentals in hours.", "signature_timestamp": "The timestamp of the protocol admin signature."}}, "withdraw((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))[])": {"details": "Iterates over token contexts to withdraw NFTs from their vaults and claim any unclaimed rewards, while also burning the matching ERC721 renting token.", "params": {"token_contexts": "An array of token contexts, each containing the vault state for an NFT."}}, "stake_deposit(((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)),uint256)[])": {"details": "Iterates over token contexts to deposit the given amounts for each NFT in the staking pool", "params": {"token_contexts": "An array of token contexts paired with amounts, each containing the rental state for an NFT."}}, "stake_withdraw(((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)),uint256)[],address)": {"details": "Iterates over token contexts to withdraw the given amounts for each NFT from the staking pool", "params": {"token_contexts": "An array of token contexts paired with amounts, each containing the rental state for an NFT.", "recipient": "The address to receive the withdrawn amounts."}}, "stake_claim(((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)),uint256)[],address)": {"details": "Iterates over token contexts to claim the rewards for each NFT from the staking pool", "params": {"token_contexts": "An array of token contexts paired with amounts, each containing the rental state for an NFT.", "recipient": "The address to receive the claimed rewards."}}, "stake_compound(((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)),uint256)[])": {"details": "Iterates over token contexts to compound the rewards for each NFT in the staking pool", "params": {"token_contexts": "An array of token contexts paired with amounts, each containing the rental state for an NFT."}}, "claim((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))[])": {"details": "Iterates over token contexts to claim rewards for each expired rental. The rental rewards and any previous unclaimed rewards are transferred to the NFT owner and the protocol fees are accrued.", "params": {"token_contexts": "An array of token contexts, each containing the rental state for an NFT."}}, "claimable_rewards(address,(uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))[])": {"details": "Iterates over token contexts to compute the claimable rewards for each expired rental, wich are then summed up to any previous unclaimed rewards.", "params": {"nft_owner": "The address of the NFT owner.", "token_contexts": "An array of token contexts, each containing the rental state for an NFT."}, "returns": {"_0": "The claimable rewards for the given NFT owner."}}, "claim_token_ownership((uint256,address,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256))[])": {"details": "Iterates over token contexts to claim the ownership of each NFT. The ownership is transferred to the NFT owner and the rental state is cleared.", "params": {"token_contexts": "An array of token contexts, each containing the rental state for an NFT."}}, "claim_fees()": {"details": "Transfers the accrued protocol fees to the protocol wallet and logs the event."}, "set_protocol_fee(uint256)": {"details": "Sets the protocol fee to the given value and logs the event. Admin function.", "params": {"protocol_fee": "The new protocol fee."}}, "change_protocol_wallet(address)": {"details": "Changes the protocol wallet to the given address and logs the event. Admin function.", "params": {"new_protocol_wallet": "The new protocol wallet."}}, "set_paused(bool)": {"details": "Pauses or unpauses the contract and logs the event. Admin function.", "params": {"paused": "The new paused state."}}, "propose_admin(address)": {"details": "Proposes a new admin and logs the event. Admin function.", "params": {"_address": "The address of the proposed admin."}}, "claim_ownership()": {"details": "Claims the ownership of the contract and logs the event. Requires the caller to be the proposed admin."}, "tokenid_to_vault(uint256)": {"details": "Computes the vault address for the given token id and returns it.", "params": {"token_id": "The token id."}, "returns": {"_0": "The vault address for the given token id."}}, "supportsInterface(bytes4)": {"details": "Checks if the contract supports the given interface and returns true if it does.", "params": {"interface_id": "The interface id."}, "returns": {"_0": "True if the contract supports the given interface."}}}}
