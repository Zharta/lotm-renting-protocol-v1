{"notice": "This contract manages the renting process for NFTs in the LOTM Renting Protocol.", "methods": {"__init__(address,address,address,address,uint256,uint256,address,address)": {"notice": "Initialize the renting contract with necessary parameters and addresses."}, "create_vaults_and_deposit(uint256[],uint256,uint256,uint256,address)": {"notice": "Create new vaults and deposit NFTs with specified listing terms."}, "deposit(uint256[],uint256,uint256,uint256,address)": {"notice": "Deposit NFTs into existing vaults with specified listing terms."}, "set_listings((uint256,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256))[],uint256,uint256,uint256,address)": {"notice": "Set listings for multiple NFTs in their respective vaults."}, "cancel_listings((uint256,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256))[],address)": {"notice": "Cancel listings for multiple NFTs in their respective vaults."}, "start_rentals((uint256,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256))[],uint256,address)": {"notice": "Start rentals for multiple NFTs based on their token contexts."}, "close_rentals((uint256,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256))[])": {"notice": "Close rentals for multiple NFTs, allowing for early rental cancelation by the renter."}, "claim((uint256,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256))[])": {"notice": "Claim rewards and protocol fees for multiple NFTs."}, "withdraw((uint256,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256))[])": {"notice": "Withdraw multiple NFTs and claim rewards and protocol fees."}, "delegate_to_wallet((uint256,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256))[],address)": {"notice": "Delegate NFTs to a specified wallet."}, "set_protocol_fee(uint256)": {"notice": "Set the protocol fee for the renting process."}, "change_protocol_wallet(address)": {"notice": "Change the wallet address that receives the protocol fees."}, "propose_admin(address)": {"notice": "Propose a new administrator for the protocol."}, "claim_ownership()": {"notice": "Claim the role of protocol administrator."}, "is_vault_available(uint256)": {"notice": "Check if a vault is available for a given NFT token id."}, "tokenid_to_vault(uint256)": {"notice": "Get the vault address for a given NFT token id."}}}
{"title": "LOTM Renting Protocol Contract", "author": "[Zharta](https://zharta.io/)", "details": "This contract is the single user-facing contract for each Renting Market. It does not hold any assets, it manages the creation of vaults (as minimal proxies to the vault implementation) and delegates the calls to the vaults, with the exception of the admin functions.", "methods": {"__init__(address,address,address,address,uint256,uint256,address,address)": {"details": "Sets up the contract by initializing various addresses and fees.", "params": {"_vault_impl_addr": "The address of the vault implementation.", "_payment_token_addr": "The address of the payment token.", "_nft_contract_addr": "The address of the NFT contract.", "_delegation_registry_addr": "The address of the delegation registry.", "_max_protocol_fee": "The maximum protocol fee that can be set.", "_protocol_fee": "The initial protocol fee.", "_protocol_wallet": "The wallet to receive protocol fees.", "_protocol_admin": "The administrator of the protocol."}}, "create_vaults_and_deposit(uint256[],uint256,uint256,uint256,address)": {"details": "Iterates over a list of token ids, creating vaults and depositing NFTs with the given listing terms.", "params": {"token_ids": "An array of NFT token ids to create vaults for and deposit.", "price": "Rental price per hour for each NFT, 0 meaning unlisted.", "min_duration": "Minimum rental duration in hours.", "max_duration": "Maximum rental duration in hours, 0 for unlimited.", "delegate": "Address to delegate the NFT to while listed."}}, "deposit(uint256[],uint256,uint256,uint256,address)": {"details": "Iterates over a list of token ids, depositing NFTs into their respective vaults with the given listing terms.", "params": {"token_ids": "An array of NFT token ids to deposit.", "price": "Rental price per hour for each NFT, 0 meaning unlisted.", "min_duration": "Minimum rental duration in hours.", "max_duration": "Maximum rental duration in hours, 0 for unlimited.", "delegate": "Address to delegate the NFT to while listed."}}, "set_listings((uint256,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256))[],uint256,uint256,uint256,address)": {"details": "Iterates over a list of token contexts, updating the listings with the given terms.", "params": {"token_contexts": "An array of token contexts, each containing the vault state for an NFT.", "price": "Rental price per hour for each NFT, 0 meaning unlisted.", "min_duration": "Minimum rental duration in hours.", "max_duration": "Maximum rental duration in hours, 0 for unlimited.", "delegate": "Address to delegate the NFT to while listed."}}, "cancel_listings((uint256,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256))[],address)": {"details": "Iterates over a list of token contexts, canceling the listings in their respective vaults.", "params": {"token_contexts": "An array of token contexts, each containing the vault state for an NFT.", "delegate": "Address to delegate the NFT to while unlisted."}}, "start_rentals((uint256,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256))[],uint256,address)": {"details": "Iterates over token contexts to begin rentals for each NFT in their respective vaults.", "params": {"token_contexts": "An array of token contexts, each containing the vault state for an NFT.", "duration": "The duration of the rentals in hours.", "delegate": "The address to delegate the NFT to during the rental period."}}, "close_rentals((uint256,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256))[])": {"details": "Iterates over token contexts to end rentals for each NFT in their respective vaults.", "params": {"token_contexts": "An array of token contexts, each containing the vault state for an NFT."}}, "claim((uint256,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256))[])": {"details": "Iterates over token contexts to claim any unclaimed rewards and fees from the vaults.", "params": {"token_contexts": "An array of token contexts, each containing the vault state for an NFT."}}, "withdraw((uint256,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256))[])": {"details": "Iterates over token contexts to withdraw NFTs from their vaults and claim any unclaimed rewards and fees.", "params": {"token_contexts": "An array of token contexts, each containing the vault state for an NFT."}}, "delegate_to_wallet((uint256,(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256))[],address)": {"details": "Iterates over token contexts to set the delegation of NFTs in their vaults.", "params": {"token_contexts": "An array of token contexts, each containing the vault state for an NFT.", "delegate": "The address to delegate the NFTs to."}}, "set_protocol_fee(uint256)": {"details": "Updates the protocol fee, ensuring it doesn't exceed the maximum allowed.", "params": {"protocol_fee": "The new protocol fee to be set, in bps (e.g., 500 for 5%)."}}, "change_protocol_wallet(address)": {"details": "Updates the protocol wallet address.", "params": {"new_protocol_wallet": "The new address for the protocol wallet."}}, "propose_admin(address)": {"details": "Sets a new proposed admin, which needs to claim ownership to become effective.", "params": {"_address": "The address of the proposed new admin."}}, "claim_ownership()": {"details": "Finalizes the admin transfer process by setting the caller as the new admin."}, "is_vault_available(uint256)": {"details": "Determines if a vault exists and is available, ie not in use.", "params": {"token_id": "The NFT token id to check."}, "returns": {"_0": "True if the vault is available, False otherwise."}}, "tokenid_to_vault(uint256)": {"details": "Computes the address of the vault (existent or yet to be created) associated with the specified token id.", "params": {"token_id": "The NFT token id."}, "returns": {"_0": "The address of the vault associated with the given token id."}}}}
