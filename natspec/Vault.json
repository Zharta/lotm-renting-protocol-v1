{"notice": "This contract is the vault implementation for the LOTM Renting Protocol.", "methods": {"initialise(address)": {"notice": "Initialize a vault with the given owner, enabling it to receive a token"}, "deposit(uint256,uint256,uint256,uint256,address)": {"notice": "Deposit an NFT into the vault with specified listing terms and optionaly sets up delegation."}, "set_listing(((bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256)),uint256,address,uint256,uint256,uint256,address)": {"notice": "Set or update the listing for an NFT in the vault."}, "start_rental(((bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256)),address,uint256,address,uint256,address)": {"notice": "Start a rental of an NFT from the vault."}, "close_rental(((bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256)),address)": {"notice": "Close an active rental and handle any transfers of fees or refunds."}, "claim(((bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256)),address)": {"notice": "Claim unclaimed rewards and protocol fees from the vault."}, "withdraw(((bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256)),address)": {"notice": "Withdraw an NFT from the vault and claim any unclaimed rewards and protocol fees."}, "delegate_to_wallet(((bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256)),address,address)": {"notice": "Delegate the NFT in the vault to a specified wallet."}}}
{"title": "LOTM Renting Protocol Vault Contract", "author": "[Zharta](https://zharta.io/)", "details": "This is the implementation contract for each vault, which is deployed as a minimal proxy (ERC1167) by `Renting.vy` and accepts only calls from it. This contract holds the assets (NFT, payment tokens) for each token, holds the listing and rental states, performs rewards and fee payments and sets the delegation to hot wallets. Delegations are performed by warm.xyz HotWalletProxy. The information regarding listings and rentals was externalized in order to reduce the gas costs while using the protocol. That requires the state to be passed as an argument to each function and validated by matching it's hash against the one stored in the contract. Conversly, changes to the state are hashed and stored, and the resulting state variables returned to the caller (the Renting contract), to either be published as events or returned directly to the user. The structures that hold the state are the `Listing` and the `Rentals`, although not every member is part of the state if is not required to keep the integrity of the contract.", "methods": {"__init__(address,address,address)": {"details": "Sets up the contract by initializing the payment token, NFT contract, and delegation registry addresses.", "params": {"_payment_token_addr": "The address of the payment token contract.", "_nft_contract_addr": "The address of the NFT contract.", "_delegation_registry_addr": "The address of the delegation registry contract."}}, "initialise(address)": {"details": "Ensures that the vault is not already initialized before setting the owner and caller.", "params": {"owner": "The address of the vault's owner."}}, "deposit(uint256,uint256,uint256,uint256,address)": {"details": "Validates the initialization and state of the contract before proceeding with the deposit.", "params": {"token_id": "The id of the NFT to be deposited.", "price": "The rental price per hour, a value of 0 means unlisted.", "min_duration": "The minimum rental duration in hours.", "max_duration": "The maximum rental duration in hours.", "delegate": "The address to delegate the NFT to while listed. If empty no delegation is done."}}, "set_listing(((bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256)),uint256,address,uint256,uint256,uint256,address)": {"details": "Updates the listing details, including price and duration and optionaly sets up delegation.", "params": {"state": "The current state of the vault.", "token_id": "The id of the NFT to be listed.", "sender": "The address setting the listing, expected to be the owner.", "price": "The rental price per hour, a value of 0 means unlisted.", "min_duration": "The minimum rental duration in hours.", "max_duration": "The maximum rental duration in hours, 0 for unlimited.", "delegate": "The address to delegate the NFT to while listed. If empty no delegation is done, neither any possible current delegation is changed."}}, "start_rental(((bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256)),address,uint256,address,uint256,address)": {"details": "Handles the transfer of rental amount, updates the rental state, and sets up delegation. Any previous rentals' amounts are consolidated into unclaimed_rewards.", "params": {"state": "The current state of the vault.", "renter": "The address of the renter.", "expiration": "The expiration timestamp of the rental.", "delegate": "The address to delegate the NFT to.", "protocol_fee": "The protocol fee in bps.", "protocol_wallet": "The wallet to receive the protocol fee."}, "returns": {"_0": "The details of the new rental."}}, "close_rental(((bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256)),address)": {"details": "Calculates pro-rata rental amounts and handles transfers of funds and revocation of delegation. The revised rental's amount are consolidated into unclaimed_rewards.", "params": {"state": "The current state of the vault.", "sender": "The address closing the rental, must be the renter."}, "returns": {"_0": "The pro-rata rental amount."}}, "claim(((bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256)),address)": {"details": "Transfers accumulated rewards to the owner and fees to protocol wallet.", "params": {"state": "The current state of the vault.", "sender": "The address claiming the rewards, must be the owner."}, "returns": {"_0": "A tuple with the updated rental, amount of rewards claimed, and amount of protocol fees claimed."}}, "withdraw(((bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256)),address)": {"details": "Handles the transfer of the NFT back to the owner and clears the vault's state.", "params": {"state": "The current state of the vault.", "sender": "The address withdrawing the NFT, must be the owner."}, "returns": {"_0": "A tuple with the amount of rewards and protocol fees claimed."}}, "delegate_to_wallet(((bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address),(uint256,uint256,uint256,uint256)),address,address)": {"details": "Validates that no rental is ongoing.", "params": {"state": "The current state of the vault.", "sender": "The address delegating the NFT, must be the owner.", "delegate": "The address to delegate the NFT to."}}}}
