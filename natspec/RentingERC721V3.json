{"notice": "This contract wraps renting vaults with deposited NFTs, exposing them as ERC721 tokens.", "methods": {"__init__(string,string,string,string)": {"notice": "Initialises the contract with the renting contract address."}, "initialise()": {"notice": "Initialises the contract with the renting contract address."}, "mint((uint256,address)[])": {"notice": "Mints tokens for the given NFTs."}, "burn((uint256,address)[])": {"notice": "Burns tokens for the given NFTs."}, "balanceOf(address)": {"notice": "Returns the number of NFTs owned by the given address."}, "ownerOf(uint256)": {"notice": "Returns the owner of the given NFT."}, "owner_of(uint256)": {"notice": "Returns the owner of the given NFT."}, "getApproved(uint256)": {"notice": "Returns the approved address for the given NFT."}, "isApprovedForAll(address,address)": {"notice": "Returns if the given operator is approved to manage all NFTs of the given owner."}, "transferFrom(address,address,uint256)": {"notice": "Transfers the ownership of the given NFT to the given address."}, "safeTransferFrom(address,address,uint256)": {"notice": "Safely transfers the ownership of the given NFT to the given address."}, "approve(address,uint256)": {"notice": "Approves the given address to manage the given NFT."}, "setApprovalForAll(address,bool)": {"notice": "Approves or revokes the given operator to manage all NFTs of the sender."}, "tokenURI(uint256)": {"notice": "Returns the URI for the given token."}}}
{"title": "Zharta RentingERC721 Contract", "author": "[Zharta](https://zharta.io/)", "details": "This contract is a ERC721 implementation representing the NFTs deposited in the renting vaults. Tokens are minted and burned by the renting contract, and can be transferred by the owner or approved operators. The contract can be used with any ERC721 compatible wallet or marketplace. Tokens are minted when the underlying NFTs are deposited in the renting vaults, and burned when the NFTs are withdrawn. The contract is initialised with the renting contract address, and only the renting contract can mint and burn tokens. The ownership can be transferred while rentals are ongoing, althought ownership change does not automatically changes the permissions to manage rentals (set listings, claim rewards). Renting permissions can be claimed the owner by calling the `claim_token_ownership` in the `RentingV3.vy` contract.", "methods": {"__init__(string,string,string,string)": {"params": {"_name": "Name of the collection.", "_symbol": "Symbol of the collection.", "_base_url": "Base URL for the token URIs.", "_contract_uri": "URI for the contract metadata."}}, "initialise()": {"details": "This method can only be called once, and sets the renting contract address."}, "mint((uint256,address)[])": {"details": "This method can only be called by the renting contract, and mints tokens wrapping the given NFTs to the given wallets.", "params": {"tokens": "Array of TokenAndWallet structs, containing the token id and the wallet address."}}, "burn((uint256,address)[])": {"details": "This method can only be called by the renting contract, and burns tokens wrapping the given NFTs from the given wallets.", "params": {"tokens": "Array of TokenAndWallet structs, containing the token id and the wallet address."}}, "balanceOf(address)": {"details": "This method returns the number of NFTs owned by the given address.", "params": {"_owner": "Address for which to query the balance."}, "returns": {"_0": "uint256 Number of NFTs owned by the given address."}}, "ownerOf(uint256)": {"details": "This method returns the owner of the given NFT. Reverts if the NFT does not exist.", "params": {"_tokenId": "ID of the NFT to query the owner of."}, "returns": {"_0": "address Address of the owner of the NFT."}}, "owner_of(uint256)": {"details": "This method returns the owner of the given NFT. Contrary to the ERC721 equivalent, does not revert if the NFT does not exist.", "params": {"_tokenId": "ID of the NFT to query the owner of."}, "returns": {"_0": "address Address of the owner of the NFT."}}, "getApproved(uint256)": {"details": "This method returns the approved address for the given NFT, if any. Reverts if the NFT does not exist.", "params": {"_tokenId": "ID of the NFT to query the approval of."}, "returns": {"_0": "address Address of the approved address for the NFT."}}, "isApprovedForAll(address,address)": {"details": "This method returns if the given operator is approved to manage all NFTs of the given owner.", "params": {"_owner": "Address of the owner to query for.", "_operator": "Address of the operator to query for."}, "returns": {"_0": "bool True if the operator is approved to manage all NFTs of the given owner, false otherwise."}}, "transferFrom(address,address,uint256)": {"details": "This method transfers the ownership of the given NFT to the given address. Reverts if the sender is not the owner, the NFT does not exist, or the sender is not approved to transfer the NFT.", "params": {"_from": "Address of the current owner of the NFT.", "_to": "Address of the new owner of the NFT.", "_tokenId": "ID of the NFT to transfer."}}, "safeTransferFrom(address,address,uint256)": {"details": "This method safely transfers the ownership of the given NFT to the given address. Reverts if the sender is not the owner, the NFT does not exist, or the sender is not approved to transfer the NFT. If the receiver is a contract, it must implement the ERC721Receiver interface.", "params": {"_from": "Address of the current owner of the NFT.", "_to": "Address of the new owner of the NFT.", "_tokenId": "ID of the NFT to transfer.", "_data": "Additional data with no specified format, sent in call to `_to`."}}, "safeTransferFrom(address,address,uint256,bytes)": {"details": "This method safely transfers the ownership of the given NFT to the given address. Reverts if the sender is not the owner, the NFT does not exist, or the sender is not approved to transfer the NFT. If the receiver is a contract, it must implement the ERC721Receiver interface.", "params": {"_from": "Address of the current owner of the NFT.", "_to": "Address of the new owner of the NFT.", "_tokenId": "ID of the NFT to transfer.", "_data": "Additional data with no specified format, sent in call to `_to`."}}, "approve(address,uint256)": {"details": "This method approves the given address to manage the given NFT. Reverts if the sender is not the owner of the NFT.", "params": {"_approved": "Address to approve for the given NFT.", "_tokenId": "ID of the NFT to approve."}}, "setApprovalForAll(address,bool)": {"details": "This method approves or revokes the given operator to manage all NFTs of the sender.", "params": {"_operator": "Address to approve or revoke for all NFTs of the sender.", "_approved": "True to approve, false to revoke."}}, "tokenURI(uint256)": {"details": "This method returns the URI for the given token. Reverts if the token does not exist.", "params": {"tokenId": "ID of the token to query the URI of."}, "returns": {"_0": "String[] URI for the given token."}}}}
