{"notice": "This contract is the vault implementation for the LOTM Renting Protocol.", "methods": {"initialise(uint256)": {"notice": "Initialize a vault with the given staking pool, enabling it to receive a token"}, "deposit(uint256,address,address)": {"notice": "Deposit an NFT into the vault and optionaly sets up delegation."}, "withdraw(uint256,address)": {"notice": "Withdraw an NFT from the vault and transfer it to the wallet."}, "delegate_to_wallet(address,uint256)": {"notice": "Delegate the NFT to a wallet."}, "staking_deposit(address,uint256,uint256)": {"notice": "Deposit the payment token into the staking contract."}, "staking_withdraw(address,uint256,uint256)": {"notice": "Withdraw the payment token from the staking contract."}, "staking_claim(address,uint256)": {"notice": "Claim the staking rewards."}, "staking_compound(uint256)": {"notice": "Compound the staking rewards."}, "onERC721Received(address,address,uint256,bytes)": {"notice": "ERC721 token receiver callback."}}}
{"title": "LOTM Renting Protocol Vault Contract", "author": "[Zharta](https://zharta.io/)", "details": "This is the implementation contract for each vault, which is deployed as a minimal proxy (ERC1167) by `RentingV3.vy` and accepts only calls from it. This contract holds the assets (NFTs) ) but does not store any information regarding the token, so pre-conditions must be validated by the caller (`RentingV3.vy`). It implement the functions required for token delegation and staking. Delegations are performed by warm.xyz HotWalletProxy.", "methods": {"__init__(address,address,address,address)": {"details": "Sets up the contract by initializing the payment token, NFT contract, delegation registry and staking contract addresses.", "params": {"_payment_token_addr": "The address of the payment token contract.", "_nft_contract_addr": "The address of the NFT contract.", "_delegation_registry_addr": "The address of the delegation registry contract.", "_staking_addr": "The address of the staking contract."}}, "initialise(uint256)": {"details": "Ensures that the vault is not already initialized.", "params": {"staking_pool_id": "The id of the staking pool."}}, "deposit(uint256,address,address)": {"details": "Transfers the NFT from the owner to the vault and optionally sets up delegation.", "params": {"token_id": "The id of the NFT to be deposited.", "nft_owner": "The address of the NFT owner.", "delegate": "The address to delegate the NFT to. If empty no delegation is done."}}, "withdraw(uint256,address)": {"details": "Transfers the NFT from the vault to the wallet and clears the delegation.", "params": {"token_id": "The id of the NFT to be withdrawn.", "wallet": "The address of the wallet to receive the NFT."}}, "delegate_to_wallet(address,uint256)": {"details": "Delegates the NFT to the given address.", "params": {"delegate": "The address to delegate the NFT to.", "expiration": "The expiration timestamp for the delegation."}}, "staking_deposit(address,uint256,uint256)": {"details": "Deposits the payment token into the staking contract.", "params": {"sender": "The address of the payment token sender.", "amount": "The amount of the payment token to deposit.", "token_id": "The id of the NFT supporting the deposit, which must be deposited in the vault."}}, "staking_withdraw(address,uint256,uint256)": {"details": "Withdraws the payment token from the staking contract.", "params": {"wallet": "The address of the wallet to receive the payment token.", "amount": "The amount of the payment token to withdraw.", "token_id": "The id of the NFT supporting the withdrawal, which must be deposited in the vault."}}, "staking_claim(address,uint256)": {"details": "Claims the staking rewards.", "params": {"wallet": "The address of the wallet to receive the staking rewards.", "token_id": "The id of the NFT supporting the claim, which must be deposited in the vault."}}, "staking_compound(uint256)": {"details": "Compounds the staking rewards by claiming and depositing them. No validations are performed regarding staking limits or minimal deposit amounts.", "params": {"token_id": "The id of the NFT supporting the compound, which must be deposited in the vault."}}, "onERC721Received(address,address,uint256,bytes)": {"details": "Returns the ERC721 receiver callback selector.", "params": {"_operator": "The address which called `safeTransferFrom` function.", "_from": "The address which previously owned the token.", "_tokenId": "The NFT identifier which is being transferred.", "_data": "Additional data with no specified format."}, "returns": {"_0": "The ERC721 receiver callback selector."}}}}
